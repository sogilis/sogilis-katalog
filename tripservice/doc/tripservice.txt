= Kata - Tripservice

== Business Requirements

Based on the kata by Sandro Mancuso:
https://www.youtube.com/watch?v=_NnElPO5BU0

Reseau sociale pour voyageurs

. Pour voir du contenu l'utilisateur doit se connecter
. Pour voir les voyages (trips) de'un autre utilisateur, on doit etre son ami.


== Explication:

Pour pouvoir faire des changements dans le code on veut tester.

ASTUCE : Commence à tester la branche la plus courte
https://www.youtube.com/watch?v=_NnElPO5BU0&t=78s

Explication: Si on commence de la branche la plus courte à tester jusqu'aux 
branches les plus longues, lentement on comprends notre code. Si on commencait avec la branche la plus longue,
le setup du tests serait trop compliqué.

== Tache 1:

Trouve la branche la plus courte dans TripService.getTripsByUser et écrit un test dans test_Tripservice.py.
test_should_throw_an_exception_when_user_is_not_logged_in:


== Tache 1bis:

La difficulté est qu'il faut créer une méthode getLoggedInUser pour l'implementer dans votre TestableTripService.

== Tache 2:

Create the concept of a GUEST user to make test_should_throw_an_exception_when_user_is_not_logged_in clearer.

== Tache 3:

Trouve la branche la plus courte pas encore testé: implemente test_should_not_return_any_trips_when_users_are_not_friends.

== Tache 3bis:

Move tripService = TestableTripService() to the test setup.

== Tache 4:

Teste la dernière fonctionnalité: 
test_should_return_friend_trips_when_users_are_friends
Note: TripDAO should be extracted in a method again.

Tache 5:
Utilise le pattern UserBuilder pour créér le setup du test:
friend = UserBuilder.aUser()\
            .friendsWith([TripServiceTest.ANOTHER_USER, TripServiceTest.REGISTERED_USER])\
            .withTrips([TripServiceTest.TO_BRAZIL, TripServiceTest.TO_LONDON]).build()


Tache 6:
ASTUCE : Commence à refactorer la branche le plus profonde.
https://www.youtube.com/watch?v=_NnElPO5BU0&t=1996s

La branche la plus profonde ne dépend pas sur autres choses, et lentement le code peut devenir plus compact.

Cherche un feature envie de User class et bouge le code.
Commence à mettre en place un test pour le class User.

Implemente test_users_are_not_friends en utilisant TDD, met une fonction isFriendsWith dans User.

Tache 7:









TripService.getTripsByUser n'est pas testable, parce que un singleton logged_user est utilisé dans la fonction.
Extrait cette logged_user dans un methode de TripService, et pour notre test implemente le dans TestTripService.

== Tache 2

Découvre un 'feature-envy' dans le code, et corrige-le. 


== Conclusion

. Evite de donner accès aux détails d'implémentation d'une classe